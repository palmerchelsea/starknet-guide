#!/usr/bin/env bash

# Exit on error, undefined variables, and prevent error in a pipeline from being masked
set -euo pipefail

# Global variables
file_path="$HOME/.starknet_accounts/starknet_open_zeppelin_accounts.json"
CONTRACT_NAME="HelloStarknet"
PROFILE_NAME="account1"
MULTICALL_FILE=$(mktemp)
FAILED_TESTS=false

# Check for jq and sncast dependencies
if ! command -v jq &> /dev/null; then
    echo "jq could not be found. Please install it to continue."
    exit 1
fi

if ! command -v sncast &> /dev/null; then
    echo "sncast could not be found. Please install it to continue."
    exit 1
fi

# Addresses and Private keys as environment variables
ACCOUNT1_ADDRESS=${ACCOUNT1_ADDRESS:-"0x7f61fa3893ad0637b2ff76fed23ebbb91835aacd4f743c2347716f856438429"}
ACCOUNT2_ADDRESS=${ACCOUNT2_ADDRESS:-"0x53c615080d35defd55569488bc48c1a91d82f2d2ce6199463e095b4a4ead551"}
ACCOUNT1_PRIVATE_KEY=${ACCOUNT1_PRIVATE_KEY:-"CHANGE_ME"}
ACCOUNT2_PRIVATE_KEY=${ACCOUNT2_PRIVATE_KEY:-"CHANGE_ME"}

# Ensure private keys are not default values
if [[ $ACCOUNT1_PRIVATE_KEY == "CHANGE_ME" || $ACCOUNT2_PRIVATE_KEY == "CHANGE_ME" ]]; then
    echo "Please set the account private keys before running the script."
    exit 1
fi

# Utility function to log messages
log_message() {
    echo -e "\n$1"
}

# Step 1: Clean previous environment
if [ -f "$file_path" ]; then
    log_message "Removing existing accounts file..."
    rm -f "$file_path"
fi

# Step 2: Define accounts for the smart contract
accounts_json=$(cat <<EOF
[
    {
        "name": "account1",
        "address": "$ACCOUNT1_ADDRESS",
        "private_key": "$ACCOUNT1_PRIVATE_KEY"
    },
    {
        "name": "account2",
        "address": "$ACCOUNT2_ADDRESS",
        "private_key": "$ACCOUNT2_PRIVATE_KEY"
    }
]
EOF
)

# Step 3: Run contract tests
echo -e "\nTesting the contract..."
testing_result=$(snforge 2>&1) || true
if echo "$testing_result" | grep -q "Failure"; then
    echo -e "Tests failed!\n$testing_result\n"
    echo -e "\nEnsure that your tests are passing before proceeding.\n"
    FAILED_TESTS=true
else
    echo "Tests passed successfully."
fi

# Only proceed if tests passed
if [ "$FAILED_TESTS" != "true" ]; then
    # Step 4: Create new account(s)
    echo -e "\nCreating account(s)..."
    for row in $(echo "${accounts_json}" | jq -c '.[]'); do
        name=$(echo "${row}" | jq -r '.name')
        address=$(echo "${row}" | jq -r '.address')
        private_key=$(echo "${row}" | jq -r '.private_key')

        account_creation_result=$(sncast --url http://localhost:5050/rpc account add --name "$name" --address "$address" --private-key "$private_key" --add-profile 2>&1) || true
        if echo "$account_creation_result" | grep -q "error:"; then
            echo "Account $name already exists."
        else
            echo "Account $name created successfully."
        fi
    done

    # The rest of the deployment steps go here...

    # Step 8: Clean up temporary files
    echo -e "\nCleaning up..."
    rm -f "$MULTICALL_FILE"

    echo -e "\nScript completed successfully.\n"
fi
